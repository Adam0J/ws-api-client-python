# coding: utf-8

"""
    Wheel Fitment API

    The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.  # noqa: E501

    OpenAPI spec version: v1
    Contact: info@wheel-size.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ws_api_client.models.pressure import Pressure  # noqa: F401,E501


class Wheel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tire_pressure': 'Pressure',
        'rim': 'str',
        'rim_diameter': 'float',
        'rim_width': 'float',
        'rim_offset': 'float',
        'tire': 'str',
        'tire_sizing_system': 'str',
        'tire_construction': 'str',
        'tire_width': 'float',
        'tire_aspect_ratio': 'float',
        'tire_diameter': 'float',
        'tire_section_width': 'float',
        'tire_is_82series': 'bool',
        'load_index': 'int',
        'speed_index': 'str'
    }

    attribute_map = {
        'tire_pressure': 'tire_pressure',
        'rim': 'rim',
        'rim_diameter': 'rim_diameter',
        'rim_width': 'rim_width',
        'rim_offset': 'rim_offset',
        'tire': 'tire',
        'tire_sizing_system': 'tire_sizing_system',
        'tire_construction': 'tire_construction',
        'tire_width': 'tire_width',
        'tire_aspect_ratio': 'tire_aspect_ratio',
        'tire_diameter': 'tire_diameter',
        'tire_section_width': 'tire_section_width',
        'tire_is_82series': 'tire_is_82series',
        'load_index': 'load_index',
        'speed_index': 'speed_index'
    }

    def __init__(self, tire_pressure=None, rim=None, rim_diameter=None, rim_width=None, rim_offset=None, tire=None, tire_sizing_system=None, tire_construction=None, tire_width=None, tire_aspect_ratio=None, tire_diameter=None, tire_section_width=None, tire_is_82series=None, load_index=None, speed_index=None):  # noqa: E501
        """Wheel - a model defined in Swagger"""  # noqa: E501

        self._tire_pressure = None
        self._rim = None
        self._rim_diameter = None
        self._rim_width = None
        self._rim_offset = None
        self._tire = None
        self._tire_sizing_system = None
        self._tire_construction = None
        self._tire_width = None
        self._tire_aspect_ratio = None
        self._tire_diameter = None
        self._tire_section_width = None
        self._tire_is_82series = None
        self._load_index = None
        self._speed_index = None
        self.discriminator = None

        if tire_pressure is not None:
            self.tire_pressure = tire_pressure
        self.rim = rim
        self.rim_diameter = rim_diameter
        self.rim_width = rim_width
        self.rim_offset = rim_offset
        self.tire = tire
        self.tire_sizing_system = tire_sizing_system
        self.tire_construction = tire_construction
        self.tire_width = tire_width
        self.tire_aspect_ratio = tire_aspect_ratio
        self.tire_diameter = tire_diameter
        self.tire_section_width = tire_section_width
        self.tire_is_82series = tire_is_82series
        if load_index is not None:
            self.load_index = load_index
        if speed_index is not None:
            self.speed_index = speed_index

    @property
    def tire_pressure(self):
        """Gets the tire_pressure of this Wheel.  # noqa: E501


        :return: The tire_pressure of this Wheel.  # noqa: E501
        :rtype: Pressure
        """
        return self._tire_pressure

    @tire_pressure.setter
    def tire_pressure(self, tire_pressure):
        """Sets the tire_pressure of this Wheel.


        :param tire_pressure: The tire_pressure of this Wheel.  # noqa: E501
        :type: Pressure
        """

        self._tire_pressure = tire_pressure

    @property
    def rim(self):
        """Gets the rim of this Wheel.  # noqa: E501

        Formatter rim size (e.g. `7Jx18 ET38`, can be __*`\"\"`*__)  # noqa: E501

        :return: The rim of this Wheel.  # noqa: E501
        :rtype: str
        """
        return self._rim

    @rim.setter
    def rim(self, rim):
        """Sets the rim of this Wheel.

        Formatter rim size (e.g. `7Jx18 ET38`, can be __*`\"\"`*__)  # noqa: E501

        :param rim: The rim of this Wheel.  # noqa: E501
        :type: str
        """
        if rim is None:
            raise ValueError("Invalid value for `rim`, must not be `None`")  # noqa: E501

        self._rim = rim

    @property
    def rim_diameter(self):
        """Gets the rim_diameter of this Wheel.  # noqa: E501

        Rim diameter, in (e.g. `18.0`, can be __*`null`*__)  # noqa: E501

        :return: The rim_diameter of this Wheel.  # noqa: E501
        :rtype: float
        """
        return self._rim_diameter

    @rim_diameter.setter
    def rim_diameter(self, rim_diameter):
        """Sets the rim_diameter of this Wheel.

        Rim diameter, in (e.g. `18.0`, can be __*`null`*__)  # noqa: E501

        :param rim_diameter: The rim_diameter of this Wheel.  # noqa: E501
        :type: float
        """
        if rim_diameter is None:
            raise ValueError("Invalid value for `rim_diameter`, must not be `None`")  # noqa: E501

        self._rim_diameter = rim_diameter

    @property
    def rim_width(self):
        """Gets the rim_width of this Wheel.  # noqa: E501

        Rim width, in (e.g. `7.0`, can be __*`null`*__)  # noqa: E501

        :return: The rim_width of this Wheel.  # noqa: E501
        :rtype: float
        """
        return self._rim_width

    @rim_width.setter
    def rim_width(self, rim_width):
        """Sets the rim_width of this Wheel.

        Rim width, in (e.g. `7.0`, can be __*`null`*__)  # noqa: E501

        :param rim_width: The rim_width of this Wheel.  # noqa: E501
        :type: float
        """
        if rim_width is None:
            raise ValueError("Invalid value for `rim_width`, must not be `None`")  # noqa: E501

        self._rim_width = rim_width

    @property
    def rim_offset(self):
        """Gets the rim_offset of this Wheel.  # noqa: E501

        Rim offset, mm (e.g. `38.0`, can be __*`null`*__)  # noqa: E501

        :return: The rim_offset of this Wheel.  # noqa: E501
        :rtype: float
        """
        return self._rim_offset

    @rim_offset.setter
    def rim_offset(self, rim_offset):
        """Sets the rim_offset of this Wheel.

        Rim offset, mm (e.g. `38.0`, can be __*`null`*__)  # noqa: E501

        :param rim_offset: The rim_offset of this Wheel.  # noqa: E501
        :type: float
        """
        if rim_offset is None:
            raise ValueError("Invalid value for `rim_offset`, must not be `None`")  # noqa: E501

        self._rim_offset = rim_offset

    @property
    def tire(self):
        """Gets the tire of this Wheel.  # noqa: E501

        Formatted tire size (e.g. `225/55R18`, can be __*`\"\"`*__)  # noqa: E501

        :return: The tire of this Wheel.  # noqa: E501
        :rtype: str
        """
        return self._tire

    @tire.setter
    def tire(self, tire):
        """Sets the tire of this Wheel.

        Formatted tire size (e.g. `225/55R18`, can be __*`\"\"`*__)  # noqa: E501

        :param tire: The tire of this Wheel.  # noqa: E501
        :type: str
        """
        if tire is None:
            raise ValueError("Invalid value for `tire`, must not be `None`")  # noqa: E501

        self._tire = tire

    @property
    def tire_sizing_system(self):
        """Gets the tire_sizing_system of this Wheel.  # noqa: E501

        Tire sizing system (e.g. `metric`, can be __*`null`*__)  # noqa: E501

        :return: The tire_sizing_system of this Wheel.  # noqa: E501
        :rtype: str
        """
        return self._tire_sizing_system

    @tire_sizing_system.setter
    def tire_sizing_system(self, tire_sizing_system):
        """Sets the tire_sizing_system of this Wheel.

        Tire sizing system (e.g. `metric`, can be __*`null`*__)  # noqa: E501

        :param tire_sizing_system: The tire_sizing_system of this Wheel.  # noqa: E501
        :type: str
        """
        if tire_sizing_system is None:
            raise ValueError("Invalid value for `tire_sizing_system`, must not be `None`")  # noqa: E501
        allowed_values = ["metric", "flotation", "lt-metric", "lt-numeric"]  # noqa: E501
        if tire_sizing_system not in allowed_values:
            raise ValueError(
                "Invalid value for `tire_sizing_system` ({0}), must be one of {1}"  # noqa: E501
                .format(tire_sizing_system, allowed_values)
            )

        self._tire_sizing_system = tire_sizing_system

    @property
    def tire_construction(self):
        """Gets the tire_construction of this Wheel.  # noqa: E501

        Tire constriction code (e.g. `R`, can be __*`null`*__)  # noqa: E501

        :return: The tire_construction of this Wheel.  # noqa: E501
        :rtype: str
        """
        return self._tire_construction

    @tire_construction.setter
    def tire_construction(self, tire_construction):
        """Sets the tire_construction of this Wheel.

        Tire constriction code (e.g. `R`, can be __*`null`*__)  # noqa: E501

        :param tire_construction: The tire_construction of this Wheel.  # noqa: E501
        :type: str
        """
        if tire_construction is None:
            raise ValueError("Invalid value for `tire_construction`, must not be `None`")  # noqa: E501
        allowed_values = ["R", "B", "D"]  # noqa: E501
        if tire_construction not in allowed_values:
            raise ValueError(
                "Invalid value for `tire_construction` ({0}), must be one of {1}"  # noqa: E501
                .format(tire_construction, allowed_values)
            )

        self._tire_construction = tire_construction

    @property
    def tire_width(self):
        """Gets the tire_width of this Wheel.  # noqa: E501

        Tire width, mm (e.g. `225.0`, can be __*`null`*__)  # noqa: E501

        :return: The tire_width of this Wheel.  # noqa: E501
        :rtype: float
        """
        return self._tire_width

    @tire_width.setter
    def tire_width(self, tire_width):
        """Sets the tire_width of this Wheel.

        Tire width, mm (e.g. `225.0`, can be __*`null`*__)  # noqa: E501

        :param tire_width: The tire_width of this Wheel.  # noqa: E501
        :type: float
        """
        if tire_width is None:
            raise ValueError("Invalid value for `tire_width`, must not be `None`")  # noqa: E501

        self._tire_width = tire_width

    @property
    def tire_aspect_ratio(self):
        """Gets the tire_aspect_ratio of this Wheel.  # noqa: E501

        Aspect ratio, % (e.g. `55.0`, can be __*`null`*__)  # noqa: E501

        :return: The tire_aspect_ratio of this Wheel.  # noqa: E501
        :rtype: float
        """
        return self._tire_aspect_ratio

    @tire_aspect_ratio.setter
    def tire_aspect_ratio(self, tire_aspect_ratio):
        """Sets the tire_aspect_ratio of this Wheel.

        Aspect ratio, % (e.g. `55.0`, can be __*`null`*__)  # noqa: E501

        :param tire_aspect_ratio: The tire_aspect_ratio of this Wheel.  # noqa: E501
        :type: float
        """
        if tire_aspect_ratio is None:
            raise ValueError("Invalid value for `tire_aspect_ratio`, must not be `None`")  # noqa: E501

        self._tire_aspect_ratio = tire_aspect_ratio

    @property
    def tire_diameter(self):
        """Gets the tire_diameter of this Wheel.  # noqa: E501

        High flotation tire diameter, in (e.g. `31.0`, can be __*`null`*__)  # noqa: E501

        :return: The tire_diameter of this Wheel.  # noqa: E501
        :rtype: float
        """
        return self._tire_diameter

    @tire_diameter.setter
    def tire_diameter(self, tire_diameter):
        """Sets the tire_diameter of this Wheel.

        High flotation tire diameter, in (e.g. `31.0`, can be __*`null`*__)  # noqa: E501

        :param tire_diameter: The tire_diameter of this Wheel.  # noqa: E501
        :type: float
        """
        if tire_diameter is None:
            raise ValueError("Invalid value for `tire_diameter`, must not be `None`")  # noqa: E501

        self._tire_diameter = tire_diameter

    @property
    def tire_section_width(self):
        """Gets the tire_section_width of this Wheel.  # noqa: E501

        High flotation section width, in (e.g. `10.5`, can be __*`null`*__)  # noqa: E501

        :return: The tire_section_width of this Wheel.  # noqa: E501
        :rtype: float
        """
        return self._tire_section_width

    @tire_section_width.setter
    def tire_section_width(self, tire_section_width):
        """Sets the tire_section_width of this Wheel.

        High flotation section width, in (e.g. `10.5`, can be __*`null`*__)  # noqa: E501

        :param tire_section_width: The tire_section_width of this Wheel.  # noqa: E501
        :type: float
        """
        if tire_section_width is None:
            raise ValueError("Invalid value for `tire_section_width`, must not be `None`")  # noqa: E501

        self._tire_section_width = tire_section_width

    @property
    def tire_is_82series(self):
        """Gets the tire_is_82series of this Wheel.  # noqa: E501

        Is an old tire with assumed aspect ratio 82%  # noqa: E501

        :return: The tire_is_82series of this Wheel.  # noqa: E501
        :rtype: bool
        """
        return self._tire_is_82series

    @tire_is_82series.setter
    def tire_is_82series(self, tire_is_82series):
        """Sets the tire_is_82series of this Wheel.

        Is an old tire with assumed aspect ratio 82%  # noqa: E501

        :param tire_is_82series: The tire_is_82series of this Wheel.  # noqa: E501
        :type: bool
        """
        if tire_is_82series is None:
            raise ValueError("Invalid value for `tire_is_82series`, must not be `None`")  # noqa: E501

        self._tire_is_82series = tire_is_82series

    @property
    def load_index(self):
        """Gets the load_index of this Wheel.  # noqa: E501

        Load index (e.g. `98`, can be __*`null`*__)  # noqa: E501

        :return: The load_index of this Wheel.  # noqa: E501
        :rtype: int
        """
        return self._load_index

    @load_index.setter
    def load_index(self, load_index):
        """Sets the load_index of this Wheel.

        Load index (e.g. `98`, can be __*`null`*__)  # noqa: E501

        :param load_index: The load_index of this Wheel.  # noqa: E501
        :type: int
        """

        self._load_index = load_index

    @property
    def speed_index(self):
        """Gets the speed_index of this Wheel.  # noqa: E501

        Speed rating (e.g. `H`, can be __*`null`*__)  # noqa: E501

        :return: The speed_index of this Wheel.  # noqa: E501
        :rtype: str
        """
        return self._speed_index

    @speed_index.setter
    def speed_index(self, speed_index):
        """Sets the speed_index of this Wheel.

        Speed rating (e.g. `H`, can be __*`null`*__)  # noqa: E501

        :param speed_index: The speed_index of this Wheel.  # noqa: E501
        :type: str
        """

        self._speed_index = speed_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Wheel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
