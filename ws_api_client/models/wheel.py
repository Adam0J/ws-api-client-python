# coding: utf-8

"""
    Wheel Fitment API

    The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.  # noqa: E501

    OpenAPI spec version: v1
    Contact: info@wheel-size.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ws_api_client.models.pressure import Pressure  # noqa: F401,E501


class Wheel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tire_pressure': 'Pressure',
        'rim': 'str',
        'tire': 'str',
        'tire_is_82series': 'bool'
    }

    attribute_map = {
        'tire_pressure': 'tire_pressure',
        'rim': 'rim',
        'tire': 'tire',
        'tire_is_82series': 'tire_is_82series'
    }

    def __init__(self, tire_pressure=None, rim=None, tire=None, tire_is_82series=None):  # noqa: E501
        """Wheel - a model defined in Swagger"""  # noqa: E501

        self._tire_pressure = None
        self._rim = None
        self._tire = None
        self._tire_is_82series = None
        self.discriminator = None

        if tire_pressure is not None:
            self.tire_pressure = tire_pressure
        self.rim = rim
        self.tire = tire
        self.tire_is_82series = tire_is_82series

    @property
    def tire_pressure(self):
        """Gets the tire_pressure of this Wheel.  # noqa: E501


        :return: The tire_pressure of this Wheel.  # noqa: E501
        :rtype: Pressure
        """
        return self._tire_pressure

    @tire_pressure.setter
    def tire_pressure(self, tire_pressure):
        """Sets the tire_pressure of this Wheel.


        :param tire_pressure: The tire_pressure of this Wheel.  # noqa: E501
        :type: Pressure
        """

        self._tire_pressure = tire_pressure

    @property
    def rim(self):
        """Gets the rim of this Wheel.  # noqa: E501

        Formatter rim size (e.g. `7Jx18 ET38`, can be __*`\"\"`*__)  # noqa: E501

        :return: The rim of this Wheel.  # noqa: E501
        :rtype: str
        """
        return self._rim

    @rim.setter
    def rim(self, rim):
        """Sets the rim of this Wheel.

        Formatter rim size (e.g. `7Jx18 ET38`, can be __*`\"\"`*__)  # noqa: E501

        :param rim: The rim of this Wheel.  # noqa: E501
        :type: str
        """
        if rim is None:
            raise ValueError("Invalid value for `rim`, must not be `None`")  # noqa: E501

        self._rim = rim

    @property
    def tire(self):
        """Gets the tire of this Wheel.  # noqa: E501

        Formatted tire size (e.g. `225/55R18`, can be __*`\"\"`*__)  # noqa: E501

        :return: The tire of this Wheel.  # noqa: E501
        :rtype: str
        """
        return self._tire

    @tire.setter
    def tire(self, tire):
        """Sets the tire of this Wheel.

        Formatted tire size (e.g. `225/55R18`, can be __*`\"\"`*__)  # noqa: E501

        :param tire: The tire of this Wheel.  # noqa: E501
        :type: str
        """
        if tire is None:
            raise ValueError("Invalid value for `tire`, must not be `None`")  # noqa: E501

        self._tire = tire

    @property
    def tire_is_82series(self):
        """Gets the tire_is_82series of this Wheel.  # noqa: E501

        Is an old tire with assumed aspect ratio 82%  # noqa: E501

        :return: The tire_is_82series of this Wheel.  # noqa: E501
        :rtype: bool
        """
        return self._tire_is_82series

    @tire_is_82series.setter
    def tire_is_82series(self, tire_is_82series):
        """Sets the tire_is_82series of this Wheel.

        Is an old tire with assumed aspect ratio 82%  # noqa: E501

        :param tire_is_82series: The tire_is_82series of this Wheel.  # noqa: E501
        :type: bool
        """
        if tire_is_82series is None:
            raise ValueError("Invalid value for `tire_is_82series`, must not be `None`")  # noqa: E501

        self._tire_is_82series = tire_is_82series

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Wheel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
