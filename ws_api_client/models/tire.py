# coding: utf-8

"""
    Wheel Fitment API

    The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.  # noqa: E501

    OpenAPI spec version: v1
    Contact: info@wheel-size.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Tire(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tire': 'str',
        'width': 'int',
        'aspect_ratio': 'int',
        'rim_diameter': 'float',
        'count': 'int'
    }

    attribute_map = {
        'tire': 'tire',
        'width': 'width',
        'aspect_ratio': 'aspect_ratio',
        'rim_diameter': 'rim_diameter',
        'count': 'count'
    }

    def __init__(self, tire=None, width=None, aspect_ratio=None, rim_diameter=None, count=None):  # noqa: E501
        """Tire - a model defined in Swagger"""  # noqa: E501

        self._tire = None
        self._width = None
        self._aspect_ratio = None
        self._rim_diameter = None
        self._count = None
        self.discriminator = None

        if tire is not None:
            self.tire = tire
        if width is not None:
            self.width = width
        if aspect_ratio is not None:
            self.aspect_ratio = aspect_ratio
        if rim_diameter is not None:
            self.rim_diameter = rim_diameter
        if count is not None:
            self.count = count

    @property
    def tire(self):
        """Gets the tire of this Tire.  # noqa: E501

        Formatted tire size (e.g. `225/55R18`)  # noqa: E501

        :return: The tire of this Tire.  # noqa: E501
        :rtype: str
        """
        return self._tire

    @tire.setter
    def tire(self, tire):
        """Sets the tire of this Tire.

        Formatted tire size (e.g. `225/55R18`)  # noqa: E501

        :param tire: The tire of this Tire.  # noqa: E501
        :type: str
        """

        self._tire = tire

    @property
    def width(self):
        """Gets the width of this Tire.  # noqa: E501

        Tire section width, mm (e.g. `195`)  # noqa: E501

        :return: The width of this Tire.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Tire.

        Tire section width, mm (e.g. `195`)  # noqa: E501

        :param width: The width of this Tire.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this Tire.  # noqa: E501

        Tire aspect ratio, % (e.g. `55`)  # noqa: E501

        :return: The aspect_ratio of this Tire.  # noqa: E501
        :rtype: int
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this Tire.

        Tire aspect ratio, % (e.g. `55`)  # noqa: E501

        :param aspect_ratio: The aspect_ratio of this Tire.  # noqa: E501
        :type: int
        """

        self._aspect_ratio = aspect_ratio

    @property
    def rim_diameter(self):
        """Gets the rim_diameter of this Tire.  # noqa: E501

        Rim diameter, in (e.g. `16`)  # noqa: E501

        :return: The rim_diameter of this Tire.  # noqa: E501
        :rtype: float
        """
        return self._rim_diameter

    @rim_diameter.setter
    def rim_diameter(self, rim_diameter):
        """Sets the rim_diameter of this Tire.

        Rim diameter, in (e.g. `16`)  # noqa: E501

        :param rim_diameter: The rim_diameter of this Tire.  # noqa: E501
        :type: float
        """

        self._rim_diameter = rim_diameter

    @property
    def count(self):
        """Gets the count of this Tire.  # noqa: E501

        Number of vehicles matching tire size  # noqa: E501

        :return: The count of this Tire.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Tire.

        Number of vehicles matching tire size  # noqa: E501

        :param count: The count of this Tire.  # noqa: E501
        :type: int
        """

        self._count = count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tire):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
