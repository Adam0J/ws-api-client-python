# coding: utf-8

"""
    Wheel Fitment API

    The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.  # noqa: E501

    OpenAPI spec version: v1
    Contact: info@wheel-size.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.aggregation import Aggregation  # noqa: F401,E501


class RimAgregation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'diameter': 'Aggregation',
        'offset': 'Aggregation',
        'width': 'Aggregation'
    }

    attribute_map = {
        'diameter': 'diameter',
        'offset': 'offset',
        'width': 'width'
    }

    def __init__(self, diameter=None, offset=None, width=None):  # noqa: E501
        """RimAgregation - a model defined in Swagger"""  # noqa: E501

        self._diameter = None
        self._offset = None
        self._width = None
        self.discriminator = None

        self.diameter = diameter
        self.offset = offset
        self.width = width

    @property
    def diameter(self):
        """Gets the diameter of this RimAgregation.  # noqa: E501


        :return: The diameter of this RimAgregation.  # noqa: E501
        :rtype: Aggregation
        """
        return self._diameter

    @diameter.setter
    def diameter(self, diameter):
        """Sets the diameter of this RimAgregation.


        :param diameter: The diameter of this RimAgregation.  # noqa: E501
        :type: Aggregation
        """
        if diameter is None:
            raise ValueError("Invalid value for `diameter`, must not be `None`")  # noqa: E501

        self._diameter = diameter

    @property
    def offset(self):
        """Gets the offset of this RimAgregation.  # noqa: E501


        :return: The offset of this RimAgregation.  # noqa: E501
        :rtype: Aggregation
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this RimAgregation.


        :param offset: The offset of this RimAgregation.  # noqa: E501
        :type: Aggregation
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    @property
    def width(self):
        """Gets the width of this RimAgregation.  # noqa: E501


        :return: The width of this RimAgregation.  # noqa: E501
        :rtype: Aggregation
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this RimAgregation.


        :param width: The width of this RimAgregation.  # noqa: E501
        :type: Aggregation
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimAgregation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
